
dev:
  POSTGRES_CONNECT_TIMEOUT: 10
  POSTGRES_DBNAME: chembl_db
  POSTGRES_SCHEMA: public # Optional
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres@123
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432  
  
  
  ----\
  
  
  SELECT * 
FROM PUBLIC.CHEMBL_ML_DATASET
WHERE standard_value is not null
LIMIT 10000;-- Docs: https://docs.mage.ai/guides/sql-blocks
--OFFSET {offset}
--LIMIT {limit};


------------

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


import mlflow
import mlflow.sklearn
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here

    data = data.dropna()
    X = data[["mw_freebase", "alogp", "hba", "hbd"]]
    y = data[["standard_value"]]

   
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    train_dict = {
        "X_train": X_train,
        "X_test": X_test,
        "y_train": y_train,
        "y_test": y_test
    }
    # Return all four for downstream blocks
    return train_dict


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'


----
if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test

from mage_ai.data_preparation.decorators import transformer
from sklearn.linear_model import LinearRegression
import mlflow
import mlflow.sklearn
from datetime import datetime

@transformer
def transform(train_dict, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here

    X_train = train_dict['X_train']
    y_train = train_dict['y_train']
    
    existing_experiment = mlflow.get_experiment_by_name(experiment_name)
    if existing_experiment is None:
        mlflow.create_experiment(experiment_name)

    run_uuid=kwargs['run_uuid']
    mlflow.set_tracking_uri("http://mlflow:5000") 

    # Add custom tags
    with mlflow.start_run() as run:

        model = LinearRegression()
        model.fit(X_train, y_train)        
        mlflow.set_tag("run_uuid", "run_uuid")
        mlflow.set_tag("run_datetime", datetime.now().isoformat())    


    return train_dict


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'

